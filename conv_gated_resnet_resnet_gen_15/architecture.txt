GatedResnetConvResnetG (
  (main_initial): Sequential (
    (0): ConvTranspose2d(62, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    (2): ReLU (inplace)
    (3): ConvTranspose2d(64, 32, kernel_size=(7, 7), stride=(1, 1), bias=False)
    (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    (5): ReLU (inplace)
    (6): ConvTranspose2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    (8): ReLU (inplace)
    (9): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  )
  (main): Sequential (
    (0): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (1): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (2): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (3): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (4): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (5): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (6): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (7): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (8): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (9): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (10): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (11): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (12): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (13): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (14): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (15): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (16): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (17): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (18): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (19): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (20): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (21): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (22): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (23): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (24): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (25): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (26): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (27): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (28): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (29): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (30): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (31): GatedConvResBlock (
      (model): Sequential (
        (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (32): Conv2d(16, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (33): Tanh ()
  )
  (gate): Sequential (
    (0): Linear (12 -> 32)
    (1): ReLU ()
    (2): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (3): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (4): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (5): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (6): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (7): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (8): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (9): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (10): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (11): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (12): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (13): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (14): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (15): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (16): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (17): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (18): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (19): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (20): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (21): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (22): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (23): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (24): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (25): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (26): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (27): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (28): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (29): ResBlock (
      (model): Sequential (
        (0): Linear (32 -> 32)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True)
        (2): ReLU (inplace)
        (3): Linear (32 -> 32)
      )
    )
    (30): Linear (32 -> 32)
    (31): Softmax ()
  )
)
FrontEnd (
  (main): Sequential (
    (0): Conv2d(1, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU (0.1, inplace)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
    (4): LeakyReLU (0.1, inplace)
    (5): Conv2d(128, 1024, kernel_size=(7, 7), stride=(1, 1), bias=False)
    (6): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True)
    (7): LeakyReLU (0.1, inplace)
  )
)
D (
  (main): Sequential (
    (0): Conv2d(1024, 1, kernel_size=(1, 1), stride=(1, 1))
    (1): Sigmoid ()
  )
)
Q (
  (conv): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
  (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
  (lReLU): LeakyReLU (0.1, inplace)
  (conv_disc): Conv2d(128, 10, kernel_size=(1, 1), stride=(1, 1))
  (conv_mu): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
  (conv_var): Conv2d(128, 2, kernel_size=(1, 1), stride=(1, 1))
)
